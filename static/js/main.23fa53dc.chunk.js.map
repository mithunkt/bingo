{"version":3,"sources":["components/Cell.js","components/Bingo.js","hooks/useCellState.js","App.js","serviceWorker.js","index.js"],"names":["Cell","onClick","id","isSelected","isLive","isWinner","className","getClassName","key","Bingo","status","map","letter","index","console","log","WINNERS","useCellState","useState","cellData","setCellData","isRunning","setIsRunning","generation","setGeneration","currentCount","setCurrentCount","bingoCount","setBingoCount","setMode","useEffect","generateCellData","checkBingo","x","y","push","finalWinnerCount","forEach","winnerItem","cellSelected","winnerIndex","item","matchingCell","find","cellIndex","updateCellData","mode","counterChanged","cell","parseInt","App","cellClickHandler","event","cellId","currentTarget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23fa53dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cell = ({onClick, id, isSelected, isLive, isWinner}) => {\r\n    const getClassName = () => {\r\n        let className = 'cell'\r\n        if (isSelected) { className = className + ' live' }\r\n        if (isWinner) { className = className + ' winner' }\r\n        return className\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={getClassName()}\r\n            id={id}\r\n            key={id}\r\n            onClick={onClick}\r\n    >{isLive}</div>\r\n    )\r\n}\r\n\r\nexport default Cell","import React from 'react'\r\n\r\nconst Bingo = ({status}) => {\r\n    let bingoStr = 'BINGO'\r\n\r\n    return (\r\n        <div className='bingo-text'>\r\n            { [ ...bingoStr ].map((letter, index) => {\r\n                console.log(typeof letter)\r\n                return (<span className={index < status ? 'bingo-text__selected' : ''}>{ letter }</span>)\r\n}) }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bingo","import { useState, useEffect } from 'react'\r\n\r\nconst CELL_SIZE = 5\r\n\r\nconst WINNERS = [\r\n    [0,1,2,3,4],\r\n    [5,6,7,8,9],\r\n    [10,11,12,13,14],\r\n    [15,16,17,18,19],\r\n    [20,21,22,23,24],\r\n    [0,6,12,18,24],\r\n    [4,8,12,16,20],\r\n    [0,5,10,15,20],\r\n    [1,6,11,16,21],\r\n    [2,7,12,17,22],\r\n    [3,8,13,18,23],\r\n    [4,9,14,19,24],\r\n];\r\n\r\nconst useCellState = () => {\r\n\r\n  const [cellData, setCellData] = useState()\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [generation, setGeneration] = useState(0)\r\n  const [currentCount, setCurrentCount] = useState(1)\r\n  const [bingoCount, setBingoCount] = useState(0)\r\n  const [mode, setMode] = useState()\r\n\r\n  useEffect(() => {\r\n    setCellData(generateCellData())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if(currentCount === 26) { checkBingo() }\r\n  },[cellData])\r\n\r\n  const generateCellData = () => {\r\n    let cellData = []\r\n    let id = 0\r\n    for (let x = 0; x < CELL_SIZE; x++) {\r\n        for (let y = 0; y < CELL_SIZE; y++) {\r\n          cellData.push({id, x, y, isLive: null })\r\n          id++\r\n        }\r\n    }\r\n    return cellData\r\n  }\r\n\r\n  const checkBingo = () => {\r\n    let finalWinnerCount = 0\r\n    WINNERS.forEach((winnerItem, index) => {\r\n        let cellSelected = 0\r\n        winnerItem.forEach((winnerIndex, item) => {\r\n            let matchingCell = cellData.find((cellIndex) => winnerIndex === cellIndex.id)\r\n            if(matchingCell && matchingCell.isSelected){ \r\n              cellSelected = cellSelected + 1 \r\n            }\r\n        })\r\n        if (cellSelected >= 5) {\r\n            finalWinnerCount = finalWinnerCount +1\r\n        }\r\n    })\r\n    setBingoCount(finalWinnerCount)\r\n    if (finalWinnerCount >= 5) {console.log('>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<')}\r\n  }\r\n\r\n  const updateCellData = (id, mode) => { \r\n    setMode(mode)\r\n    switch(mode) {\r\n      case 'reset': \r\n        setIsRunning(false)\r\n        setGeneration(0)\r\n        setCurrentCount(1)\r\n        setBingoCount(0)\r\n        setCellData(generateCellData())\r\n        break;\r\n      case 'select':\r\n        let counterChanged = false \r\n        setCellData(cellData?.map((cell) => {\r\n          if(cell.id === parseInt(id) && !cell.isLive) {\r\n            counterChanged = true  \r\n            return { ...cell, isLive: currentCount }\r\n          } else {\r\n            return cell\r\n          }\r\n        }))\r\n        if (counterChanged){\r\n            setCurrentCount(currentCount+1)\r\n        }\r\n        if(currentCount === 26) {\r\n            setCellData(cellData?.map((cell) => {\r\n                if(cell.id === parseInt(id)) {\r\n                  return { ...cell, isSelected: !cell.isSelected }\r\n                } else {\r\n                  return cell\r\n                }\r\n            }))\r\n        }\r\n        break;\r\n      case 'game':\r\n        break;              \r\n      default: break;              \r\n    }\r\n  }\r\n\r\n  return {\r\n    cellData,\r\n    updateCellData,\r\n    isRunning,\r\n    generation,\r\n    setCellData,\r\n    bingoCount,\r\n  } \r\n\r\n}\r\n\r\nexport default useCellState","import React from 'react';\nimport Cell from './components/Cell'\nimport Bingo from './components/Bingo'\nimport useCellState from './hooks/useCellState'\nimport './App.css';\n\nconst App = () => {\n\n  const {cellData, updateCellData, bingoCount} = useCellState()\n\n  const cellClickHandler = (event) => {\n    const cellId = event.currentTarget.id\n    updateCellData(cellId, 'select')\n  }\n\n  const resetHandler = () => updateCellData('', 'reset')\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        Bingo Game\n      </header>\n      <Bingo status={bingoCount}/>\n      <section>\n        <div className=\"cell-container\">\n          { cellData && cellData.map((item) => (\n            <Cell \n              {...item}\n              onClick={ cellClickHandler }\n            />\n          )) }\n        </div>\n        <div className=\"controls\">\n          <button className=\"btn btn-red\" onClick={ resetHandler }>{'Reset'}</button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}